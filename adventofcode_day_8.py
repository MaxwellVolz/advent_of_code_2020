# -*- coding: utf-8 -*-
"""adventofcode_day_7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Cc_yErAgJjsYDW0BTLrt1HhwKOOq0Lbc
"""
f = open("data/day_8_part_1.txt")
test_data_part_1 = "".join(f.readlines())

# print(test_data_part_1)

boot_code = test_data_part_1.split("\n")


lines_executed = []
total_possible_lines = len(boot_code)


def execute_line(accumulator, line_number):

    instruction = boot_code[line_number]
    print("Executing line:", line_number, "| accumulator:", accumulator)

    if line_number in lines_executed:
        print("Duplicate line attempted:", line_number, lines_executed)
        print("\nAccumulator:", accumulator)
        return
    lines_executed.append(line_number)

    if "acc" in instruction:
        increment_value = int(instruction.split(" ")[1][1:])
        if "+" in instruction:
            accumulator += increment_value
        else:
            accumulator -= increment_value
        line_number += 1

    elif "jmp" in instruction:
        jump_value = int(instruction.split(" ")[1][1:])
        if "+" in instruction:
            line_number += jump_value
        else:
            line_number -= jump_value

    else:
        line_number += 1

    if len(lines_executed) == total_possible_lines:
        print("\nAccumulator:", accumulator)
        return
    else:
        execute_line(accumulator, line_number)

# execute_line(0, 0)




def execute_line2(accumulator, line_number):

    instruction = boot_code[line_number]
    print("Executing line:", line_number, "| accumulator:", accumulator, "| instruction:", instruction)

    if line_number in lines_executed:
        print('Found the bug! Line:', line_number,'repeated...', lines_executed)
        if "jmp" in boot_code[lines_executed[-1]]:
            instruction = boot_code[lines_executed[-1]].replace('jmp', 'nop')
            print(instruction)
        else:
            instruction = boot_code[lines_executed[-1]].replace('nop', 'jmp')
        line_number = lines_executed[-1]
        lines_executed.pop()
        print(lines_executed)
        print("Replaced instruction:",instruction)
    else:
        lines_executed.append(line_number)

    if "acc" in instruction:
        increment_value = int(instruction.split(" ")[1][1:])
        if "+" in instruction:
            accumulator += increment_value
        else:
            accumulator -= increment_value
        line_number += 1

    elif "jmp" in instruction:
        jump_value = int(instruction.split(" ")[1][1:])
        if "+" in instruction:
            line_number += jump_value
        else:
            line_number -= jump_value

    else:
        line_number += 1

    if len(lines_executed) == total_possible_lines:
        print("\nAccumulator:", accumulator)
        return
    else:
        execute_line2(accumulator, line_number)

execute_line2(0, 0)