# -*- coding: utf-8 -*-
"""adventofcode_day_7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Cc_yErAgJjsYDW0BTLrt1HhwKOOq0Lbc
"""
import time

f = open("data/day_7_part_1.txt")
test_data_part_1 = ''.join(f.readlines())

bag_rules = test_data_part_1.split('\n')
# print(bag_rules)

good_bags = set()


def search_container_bag(container_bag, super_bag_set=set()):
    for rule in bag_rules:
        if f'{container_bag} bag' in rule and f'{container_bag} bags contain' not in rule:
            # print(rule)
            new_found_bag = rule.split(' bags')[0]
            super_bag_set.add(new_found_bag)
            search_container_bag(new_found_bag, super_bag_set)

    return super_bag_set


for rule in bag_rules:
    if 'shiny gold bag' in rule and 'shiny gold bags contain' not in rule:

        good_bag = rule.split(' bags')[0]
        good_bags.add(good_bag)
        # print(rule)

        inner_bags = search_container_bag(good_bag)

        for bag in inner_bags:
            good_bags.add(bag)
            search_container_bag(bag)
        # print('inner_bags:', inner_bags)

# print(len(good_bags), "good bags:", good_bags)
print(len(good_bags))

f = open("data/day_7_part_2.txt")
test_data_part_2 = ''.join(f.readlines())

bag_rules = test_data_part_2

bag_rules = bag_rules.split('\n')

print(bag_rules)
good_bags = set()
bag_count = 0


def sum_inner_bags(bag_amt, bag_desc, bag_sum=0):
    # print(f'{bag_desc} bags contain')
    bags_inside = 0

    for rule in bag_rules:
        if f'{bag_desc} bags contain' in rule:
            print(bag_amt, rule)

            if 'contain no other bags.' in rule:
                break

            for part in rule.split():
                if part.isdigit():
                    bags_inside += int(part)
            print(bags_inside * bag_amt)

            # # check if no more

            # if bags_inside == 0:
            #     break

            # time.sleep(1)

            inner_bags = rule.split('contain ')[1].split()
            # print(inner_bags)
            bag_iter = 0
            increment = 0
            #
            while bag_iter * 4 < len(inner_bags):
                # time.sleep(1)

                increment = bag_iter * 4
                inner_bag_amt = int(inner_bags[increment])
                inner_bag_desc = f'{inner_bags[increment + 1]} {inner_bags[increment + 2]}'

                print('Inner Bag:',inner_bag_amt, inner_bag_desc)
                print('Current bag_sum:',bag_sum)
                # if "other bags." not in inner_bag:
                bag_sum += sum_inner_bags(inner_bag_amt, inner_bag_desc, bags_inside * bag_sum*bag_amt)
                print('New bag_sum:',bag_sum)

                # else:
                #     pass
                bag_iter += 1

    return (bags_inside * bag_amt) + bag_sum


for rule in bag_rules:
    if 'shiny gold bags contain' in rule:

        inner_bags = rule.split('contain ')[1].split()

        bag_iter = 0
        increment = 0
        while bag_iter * 4 < len(inner_bags):
            increment = bag_iter * 4

            bag_desc = f'{inner_bags[increment + 1]} {inner_bags[increment + 2]}'
            bag_count += int(inner_bags[increment])
            bag_count += int(sum_inner_bags(int(inner_bags[increment]), bag_desc))

            bag_iter += 1

        # search_for_bag
#
# print(len(good_bags), "good bags:", good_bags)

print('bag_count', bag_count)
